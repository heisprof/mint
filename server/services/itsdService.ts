import fetch from 'node-fetch';
import { storage } from '../storage';
import { Alert, Database, FileSystem } from '@shared/schema';

interface TicketData {
  summary: string;
  description: string;
  impact: string;
  urgency: string;
  category: string;
  subcategory?: string;
  assignmentGroup?: string;
}

export class ITSDService {
  async isConfigured(): Promise<boolean> {
    const integration = await storage.getItsdIntegration();
    return !!integration && integration.enabled && !!integration.endpoint;
  }
  
  async createTicket(data: TicketData): Promise<string | null> {
    try {
      const integration = await storage.getItsdIntegration();
      if (!integration || !integration.enabled || !integration.endpoint) {
        console.warn('ITSD integration not configured or disabled');
        return null;
      }
      
      const headers: Record<string, string> = {
        'Content-Type': 'application/json',
      };
      
      // Add authentication headers
      if (integration.apiKey) {
        headers['X-API-KEY'] = integration.apiKey;
      } else if (integration.username && integration.password) {
        const auth = Buffer.from(`${integration.username}:${integration.password}`).toString('base64');
        headers['Authorization'] = `Basic ${auth}`;
      } else {
        console.warn('ITSD integration missing authentication');
        return null;
      }
      
      const response = await fetch(integration.endpoint, {
        method: 'POST',
        headers,
        body: JSON.stringify(data),
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`ITSD API error: ${response.status} ${errorText}`);
        return null;
      }
      
      const result = await response.json() as any;
      
      // Extract ticket ID from response - this will depend on the specific ITSD API
      const ticketId = result.ticket_id || result.id || result.number;
      
      if (!ticketId) {
        console.error('Failed to extract ticket ID from ITSD response', result);
        return null;
      }
      
      return String(ticketId);
    } catch (error) {
      console.error('Error creating ITSD ticket:', error);
      return null;
    }
  }
  
  async createTicketForAlert(alert: Alert, database?: Database, filesystem?: FileSystem): Promise<string | null> {
    if (!database && !filesystem) {
      console.error('Cannot create ticket without database or filesystem information');
      return null;
    }
    
    // Determine impact and urgency based on severity
    const impact = alert.severity === 'critical' ? 'High' : 'Medium';
    const urgency = alert.severity === 'critical' ? 'High' : 'Medium';
    
    // Create resource name
    const resourceName = database 
      ? `Database: ${database.name} (${database.host}:${database.port})` 
      : `Filesystem: ${filesystem?.path}`;
    
    // Create ticket data
    const data: TicketData = {
      summary: `${alert.severity.toUpperCase()} Alert: ${alert.metricName} issue on ${resourceName}`,
      description: `
Alert Details:
- Resource: ${resourceName}
- Metric: ${alert.metricName}
- Current Value: ${alert.metricValue || 'N/A'}
- Message: ${alert.message}
- Time: ${new Date(alert.createdAt || Date.now()).toLocaleString()}
- Alert ID: ${alert.id}

This ticket was automatically generated by OracleWatch monitoring system.
`,
      impact,
      urgency,
      category: 'Infrastructure',
      subcategory: 'Database',
    };
    
    // Add assignment group if configured
    const assignmentGroup = database?.groupId 
      ? await storage.getGroup(database.groupId)
      : null;
    
    if (assignmentGroup) {
      data.assignmentGroup = assignmentGroup.name;
    }
    
    return this.createTicket(data);
  }
}

export const itsdService = new ITSDService();
